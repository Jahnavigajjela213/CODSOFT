# 🔐 Task 2 - Credit Card Fraud Detection

## 🎯 Objective
To build a machine learning model capable of detecting fraudulent credit card transactions using a real-world imbalanced dataset.

---

## 📁 Dataset
- **Source**: [Kaggle Credit Card Fraud Detection Dataset](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud)
- **Records**: 284,807 transactions
- **Features**: 30 anonymized features (V1-V28), Time, Amount, and Class (Target)
- **Target**:  
  - `0`: Legitimate transaction  
  - `1`: Fraudulent transaction

---

## 🛠️ Technologies Used
- Python 🐍
- Libraries: pandas, numpy, matplotlib, seaborn, scikit-learn
- Classifier: Random Forest
- Evaluation: Accuracy, Confusion Matrix, Classification Report

---

## 📌 Project Steps

1. **Data Loading** – Loaded the dataset from Kaggle
2. **Exploration & Preprocessing**  
   - Checked for null values (✅ none found)
   - Observed extreme class imbalance  
3. **Data Visualization**  
   - Class distribution using Seaborn bar chart
4. **Train-Test Split**  
   - Used stratified sampling to preserve class ratio
5. **Model Building**  
   - Trained a `RandomForestClassifier`
6. **Model Evaluation**  
   - Used confusion matrix and classification report
7. **Prediction** – Identified fraudulent transactions with ~76% recall

---

## 📊 Output Snapshot

Shape: (284807, 31)
   Time        V1        V2        V3        V4        V5        V6        V7  \
0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   
1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   
2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   
3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   
4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   

         V8        V9  ...       V21       V22       V23       V24       V25  \
0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   
1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   
2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   
3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   
4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   

        V26       V27       V28  Amount  Class  
0 -0.189115  0.133558 -0.021053  149.62      0  
1  0.125895 -0.008983  0.014724    2.69      0  
2 -0.139097 -0.055353 -0.059752  378.66      0  
3 -0.221929  0.062723  0.061458  123.50      0  
4  0.502292  0.219422  0.215153   69.99      0  

[5 rows x 31 columns]

Null values:
 Time      0
V1        0
V2        0
V3        0
V4        0
V5        0
V6        0
V7        0
V8        0
V9        0
V10       0
V11       0
V12       0
V13       0
V14       0
V15       0
V16       0
V17       0
V18       0
V19       0
V20       0
V21       0
V22       0
V23       0
V24       0
V25       0
V26       0
V27       0
V28       0
Amount    0
Class     0
dtype: int64

Class distribution:
 Class
0    284315
1       492
Name: count, dtype: int64
/tmp/ipython-input-4-507429377.py:21: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Class', data=df, palette='coolwarm')


✅ Accuracy Score: 0.9995

✅ Classification Report:

              precision    recall  f1-score   support

           0       1.00      1.00      1.00     85295
           1       0.96      0.76      0.85       148

    accuracy                           1.00     85443
   macro avg       0.98      0.88      0.92     85443
weighted avg       1.00      1.00      1.00     85443


### ✅ Confusion Matrix:

               | Predicted Legit  | Predicted Fraud |
|------------- |------------------|-----------------|
| Actual Legit |      85290       |        5        |
| Actual Fraud |       36         |       112       |

---

## 📽️ Demo Video
🎥 https://www.loom.com/share/40711d1e807a41f5b798499985169409?sid=751c0cd5-c1df-414e-ae00-39ee2543ce5d  

---

## 🔗 GitHub Repository
🔗 https://github.com/Jahnavigajjela213/CODSOFT
---

## 🏷️ Hashtags
`#codsoft` `#machinelearning` `#frauddetection` `#python` `#mlproject`


